<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AtCoder Beginner Contest 284 题解</title>
    <url>/2023/01/12/abc284/</url>
    <content><![CDATA[<h1 id="a.-sequence-order">A. Sequence Order</h1>
<p>题意：输入 <span class="math inline">\(n\)</span> 个字符串 <span class="math inline">\(s_1, s_2, \cdots, s_n\)</span>，将他们倒序输出。</p>
<p>输入字符串，将他们压入栈中，然后依次输出即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line">stack&lt;string&gt; st;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        st.<span class="built_in">push</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; st.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="b.-multi-test-cases">B. Multi Test Cases</h1>
<p>题意：有 <span class="math inline">\(t\)</span> 组数据，每次给定一个长 <span class="math inline">\(n\)</span> 的数组，每组求其中奇数的个数。</p>
<p>根据题意，每次判断累加即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++)</span><br><span class="line">            cin &gt;&gt; x, ans += (x % <span class="number">2</span> == <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="c.-count-connected-components">C. Count Connected Components</h1>
<p>题意：求一个无向图中连通块的个数。</p>
<p>设 <span class="math inline">\(mark_i\)</span> 表示点已经访问过。遍历 <span class="math inline">\(i=1\cdots n\)</span>，若 <span class="math inline">\(mark_i\)</span> 的值为 <code>false</code>，则从 <span class="math inline">\(i\)</span> 开始进行深度优先搜索，将所有与 <span class="math inline">\(i\)</span> 相连的点标记为已访问，最后答案加 <span class="math inline">\(1\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> n, m, mrk[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; es[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    mrk[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v: es[x])</span><br><span class="line">        <span class="keyword">if</span> (!mrk[v]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        es[u].<span class="built_in">push_back</span>(v), es[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!mrk[i]) ++ans, <span class="built_in">dfs</span>(i);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="d.-happy-new-year-2023">D. Happy New Year 2023</h1>
<p>题意：有 <span class="math inline">\(t\)</span> 组数据，每组给定一个整数 <span class="math inline">\(n\)</span>（<span class="math inline">\(1 \leq n \leq 9 \times 10^{18}\)</span>），已知 <span class="math inline">\(n\)</span> 可以表示为唯一的 <span class="math inline">\(n=p^2q\)</span>，且 <span class="math inline">\(p, q\)</span> 是质数，求 <span class="math inline">\(p\)</span> 和 <span class="math inline">\(q\)</span> 的值。</p>
<p>设知 <span class="math inline">\(n=p^2q \sim 10^{18}\)</span>，设 <span class="math inline">\(q \sim 10^m\)</span>，则 <span class="math inline">\(p \sim 10^{\frac{18-m}{2}}\)</span>。</p>
<p>则 <span class="math inline">\(p, q\)</span> 的阶的最大值就是 <span class="math inline">\(\max(m, \frac{18-m}{2})\)</span>。</p>
<p>若 <span class="math inline">\(m = \max(m, \frac{18-m}{2})\)</span>，则 <span class="math inline">\(2m \geq 18-m\)</span>，得 <span class="math inline">\(m\geq 6\)</span>，则 <span class="math inline">\(18-m \leq 12\)</span>，得 <span class="math inline">\(\frac{18-m}{2} \leq 6\)</span>，故而可以先找到 <span class="math inline">\(q\)</span>，所以只需要找到 <span class="math inline">\(10^6\)</span> 的素数。</p>
<p>反之，则 <span class="math inline">\(2m \leq 18-m\)</span>，得 <span class="math inline">\(m \leq 6\)</span>，所以也只需要找到 <span class="math inline">\(10^6\)</span> 的素数。但是，<span class="math inline">\(n\)</span> 的最大值是 <span class="math inline">\(9\times 10^{18}\)</span>，所以可以筛到 <span class="math inline">\(10^7\)</span>。</p>
<p>综上所述，只需要找到 <span class="math inline">\(10^6\)</span> 的素数，然后枚举 <span class="math inline">\(p\)</span> 或 <span class="math inline">\(q\)</span> 是否符合条件即可。</p>
<blockquote>
<p>筛到一个满足 <span class="math inline">\(p \equiv 0 \pmod n\)</span> 的素数 <span class="math inline">\(p\)</span> 时，若 <span class="math inline">\(p \equiv 0 \pmod{\frac{n}{p}}\)</span>，则这个素数 <span class="math inline">\(p\)</span> 一定是 <span class="math inline">\(n=p^2q\)</span> 中的素数 <span class="math inline">\(p\)</span>，否则这个素数一定是 <span class="math inline">\(q\)</span>。</p>
</blockquote>
<p>知，<span class="math inline">\(1 \sim x\)</span> 的素数大概是 <span class="math inline">\(\dfrac{x}{\ln x}\)</span> 个，设筛到的素数为 <span class="math inline">\(s\)</span>（此处 <span class="math inline">\(s=10^7\)</span>），则时间复杂度为 <span class="math inline">\(O(s+\frac{ts}{\ln s})\)</span>，其中 <span class="math inline">\(t\)</span> 为数据组数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll t, n;</span><br><span class="line">vector&lt;ll&gt; primes;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vst</span><span class="params">(x+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vst[i]) primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> pj: primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i*pj &gt; x) <span class="keyword">break</span>;</span><br><span class="line">            vst[i*pj] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % pj == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="built_in">sieve</span>(<span class="number">10000000</span>);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p: primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n%p == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n/p)%p==<span class="number">0</span>) &#123; <span class="comment">// then it&#x27;s the p</span></span><br><span class="line">                    cout &lt;&lt; p &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n/p/p &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cout &lt;&lt; (ll) <span class="built_in">sqrtl</span>(n/p) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">                  	<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="e.-count-simple-paths">E. Count Simple Paths</h1>
<p>题意：求无向图从点 <span class="math inline">\(1\)</span> 开始的简单路径个数，并对 <span class="math inline">\(10^6\)</span> 取 <span class="math inline">\(\min\)</span>。</p>
<p>直接从 <span class="math inline">\(1\)</span> 开始 DFS，若个数超过 <span class="math inline">\(10^6\)</span>，则输出 <code>1000000</code> 即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; es[N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= <span class="number">1000000</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">1000000</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ++cnt;</span><br><span class="line">    st.<span class="built_in">insert</span>(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v: es[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st.<span class="built_in">count</span>(v)) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">            st.<span class="built_in">erase</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        es[u].<span class="built_in">push_back</span>(v), es[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>ABC</tag>
      </tags>
  </entry>
</search>
